Release 0.9 (not yet released)

* The deprecated function ECLECTOR.CONCRETE-SYNTAX-TREE:CST-READ has been
  removed.

* ECLECTOR.READER:FIND-CHARACTER receives characters names with unmodified case
  and is also called in the #\<single character> case so that clients have more
  control over character lookup.

* The new generic function ECLECTOR.BASE:POSITION-OFFSET allows interested
  clients to refine the source positions of errors obtained by calling
  ECLECTOR.BASE:STREAM-POSITION.

* Some condition and restart reports have been improved.

* A discussion of the relation between circular objects and custom reader
  macros has been added to the manual.

* Problems in the ECLECTOR.READER:FIXUP method for hash tables have been fixed:
  keys were not checked for circular structure and circular structures in
  values were not fixed up in some cases.

* Eclector provides a new protocol for handling labeled objects, that is the
  objects defined and referenced by the #= and ## reader macros respectively.

* Eclector now avoids unnecessary fixup processing in object graphs with
  complicated definitions and references.

  Before this change, cases like

    #1=(1 #1# #2=(2 #2# ... #100=(100 #100#)))

  or

    #1=(1 #2=(2 ... #2#) ... #1#)

  lead to unnecessary and/or repeated traversals during fixup processing.

* Fixup processing is now performed in parse result objects.

  Before this change, something like

    (eclector.concrete-syntax-tree:read-from-string "#1=(#1#)")

  produced a CST object, say cst, which failed to satisfy

    (eq (cst:first cst)       cst)
    (eq (cst:raw (first cst)) (cst:raw cst))

  The properties now hold.

* Clients can use the new mixin classes
  ECLECTOR.CONCRETE-SYNTAX-TREE:DEFINITION-CSTS-MIXIN and
  ECLECTOR.CONCRETE-SYNTAX-TREE:REFERENCE-CSTS-MIXIN to represent labeled
  object definitions and references as instances of
  ECLECTOR.CONCRETE-SYNTAX-TREE:DEFINITION-CST and
  ECLECTOR.CONCRETE-SYNTAX-TREE:REFERENCE-CST respectively.

* The stream position in conditions signaled by
  ECLECTOR.READER::SHARPSIGN-COLON is now always present.

* When Eclector is used to produce parse results, it no longer confuses
  end-of-input with having read NIL when nil is used as the eof-value (nil
  makes sense as an eof-value in that case since nil is generally not a
  possible parse result).

* A detailed description of the constraints on return values of the generic
  functions in the Reader behavior protocol has been added to the manual.

* The eclector-concrete-syntax-tree system now works with and requires version
  0.2 of the concrete-syntax-tree system.

Release 0.8 (2021-08-24)

* The default ECLECTOR.READER:READ-TOKEN method and the functions
  ECLECTOR.READER::SHARPSIGN-COLON and ECLECTOR.READER::SHARPSIGN-BACKSLASH are
  now more efficient as well as less redundant in terms of repeated code.

* The feature :ECLECTOR-DEFINE-CL-VARIABLES now controls whether the file
  code/reader/variables.lisp is loaded and thus whether the variables
  ECLECTOR.READER:*PACKAGE*, ECLECTOR.READER:*READ-EVAL*, etc. are defined.

Release 0.7 (2021-05-16)

* The incorrectly committed generic function ECLECTOR.READER:CHECK-SYMBOL-TOKEN
  has been fixed.

* Empty escape ranges like || are no longer interpreted as potential numbers.

* The default ECLECTOR.READER:INTERPRET-SYMBOL method now signals specific
  conditions and offers restarts for recovering from situations related to
  non-existent packages and symbols as well as non-exported symbols.

  The default error recovery strategy for invalid symbols now constructs an
  uninterned symbol of the given name instead of using NIL.

* The "consing dot" is no longer accepted in sub-expressions of
  ECLECTOR.READER::LEFT-PARENTHESIS.

  At the same time, it is now possible to recover from encountering the
  "consing dot" in invalid positions.

* The default ECLECTOR.READER:INTERPRET-TOKEN method has been optimized
  substantially.

* The ECLECTOR.READER:*CLIENT* variable and the source location protocol have
  been moved to a new base module and package eclector.base which the reader
  module and the eclector.reader package can use. This structure allows code in
  the reader module to work with source locations.

  The name ECLECTOR.BASE:*CLIENT* remains exported as ECLECTOR.READER:*CLIENT*.

  The old names ECLECTOR.PARSE-RESULT:SOURCE-POSITION and
  ECLECTOR.PARSE-RESULT:MAKE-SOURCE-RANGE still exist but are now deprecated
  and will be removed in a future release.

* Conditions signaled by code in the reader module now include source positions
  which are obtained by calling ECLECTOR.BASE:SOURCE-POSITION.

Release 0.6 (2020-11-29)

* Bogus nil parse results are no longer generated by
  ECLECTOR.PARSE-RESULT:MAKE-SKIPPED-INPUT-RESULT calls when CL:*READ-SUPPRESS*
  is true.

* The new generic functions ECLECTOR.READER:READ-MAYBE-NOTHING and
  ECLECTOR.READER:CALL-AS-TOP-LEVEL-READ give clients additional entry points
  to the reader as well as customization possibilities. With these functions,
  the chain of functions calls for a READ call looks like this:

    eclector.reader:read
      eclector.reader:call-as-top-level-read
        eclector.reader:read-common
          eclector.reader:read-maybe-nothing
            ...
              eclector.reader:read-char
              eclector.reader:peek-char

  Diagrams which illustrate the relations between the new and existing
  functions have been added to the manual.

* The function ECLECTOR.READER::READ-RATIONAL now better respects the value of
  *READ-SUPPRESS*.

* Fix return value of ECLECTOR.READTABLE:SET-SYNTAX-FROM-CHAR, fix
  (SETF ECLECTOR.READTABLE:SYNTAX-FROM-CHAR) to also copy the macro character
  information.

* The semicolon reader macro now consumes the terminating newline character.

* Eclector now provides the generic function ECLECTOR.READER:WRAP-IN-FUNCTION.

* Reset ECLECTOR.READER::*LIST-READER* around recursive read in
  ECLECTOR.READER::SHARPSIGN-DOT.

* Implement and default to relaxed syntax for ECLECTOR.READER::SHARPSIGN-C. The
  strict version is still available as ECLECTOR.READER:STRICT-SHARPSIGN-C and
  can be installed into a custom readtable.

  A detailed discussion of the topic has been added to the manual.

* Eclector can now recover from reading invalid inputs like .. and ....

* Implement and default to relaxed syntax for
  ECLECTOR.READER::SHARPSIGN-SINGLE-QUOTE. The strict version is still
  available as ECLECTOR.READER:STRICT-SHARPSIGN-SINGLE-QUOTE and can be
  installed into a custom readtable.

  A detailed discussion of the topic has been added to the manual.

* Eclector now provides the generic function ECLECTOR.READER:CHECK-SYMBOL-TOKEN.

* Input of the form PACKAGE::|| is now correctly read as a symbol.

* Eclector can now recover from reading the invalid input :.

Release 0.5 (2020-06-09)

* The generic function ECLECTOR.READER:CALL-WITH-CURRENT-PACKAGE has been added.

* The previously missing functions
  ECLECTOR.PARSE-RESULT:READ-PRESERVING-WHITESPACE and
  ECLECTOR.PARSE-RESULT:READ-FROM-STRING have been added.

* The previously missing functions
  ECLECTOR.CONCRETE-SYNTAX-TREE:READ-PRESERVING-WHITESPACE and
  ECLECTOR.CONCRETE-SYNTAX-TREE:READ-FROM-STRING have been added.

* The function ECLECTOR.CONCRETE-SYNTAX-TREE:CST-READ has been renamed to
  ECLECTOR.CONCRETE-SYNTAX-TREE:READ. ECLECTOR.CONCRETE-SYNTAX-TREE:CST-READ
  still exists but is deprecated and will be removed in a future version.

* Quasiquote and unquote are now opt-out instead of opt-in. This allows
  quasiquotation in custom reader macros by default. The new macro
  ECLECTOR.READER::WITH-FORBIDDEN-QUASIQUOTATION is used by Eclector (and can
  be used in custom reader macros) to control this behavior.

* A method on ECLECTOR.READTABLE:READTABLEP for the simple readtable
  implementation has been added.

* The condition type ECLECTOR.BASE:END-OF-FILE is now a subtype of
  CL:STREAM-ERROR but not of CL:READER-ERROR.

* An error is now always signaled independently of the the value of the
  eof-error parameter when the end of input is encountered a after single
  escape or within a multiple escape. The new error conditions
  ECLECTOR.READER:UNTERMINATED-SINGLE-ESCAPE and
  ECLECTOR.READER:UNTERMINATED-MULTIPLE-ESCAPE are signaled in such situations.

* The set invalid sub-characters for # now conforms to the specification.

* The value of CL:*READ-BASE* is now used correctly when distinguishing numbers
  and symbols.

* When a number with a denominator of zero is read the new condition
  ECLECTOR.READER:ZERO-DENOMINATOR is signaled.

* The function ECLECTOR.READER:READ-DELIMITED-LIST has been added.

* The reader macro function ECLECTOR.READER::SHARPSIGN-S now accepts string
  designators as slot names.

* The reader macro functions ECLECTOR.READER::SHARPSIGN-EQUALS and
  ECLECTOR.READER::SHARPSIGN-SHARPSIGN respect the value of CL:*READ-SUPPRESS*.

* The default methods on the generic function ECLECTOR.READER:FIXUP now works
  correctly for STANDARD-OBJECT instances with unbound slots.

* The reader macro function ECLECTOR.READER::LEFT-PARENTHESIS now always reads
  until #\), not some "opposite" character.

* ECLECTOR.READER:*SKIP-REASON* is now set correctly when a line comment at the
  end of input is read.

* In almost all situations in which Eclector signals a syntax error, a restart
  named ECLECTOR.READER:RECOVER is now established which, when invoked performs
  some action which allows the remainder of the expression to be read. The
  convenience function ECLECTOR.READER:RECOVER can be used to invoke the
  restart.

Release 0.4 (2019-05-11)

* The reader macro function ECLECTOR.READER::SHARPSIGN-PLUS-MINUS now sets
  ECLECTOR.READER:*SKIP-REASON* so that parse results can be created with an
  accurate "reason" value.

* Constituent traits are now represented and used properly.

* The lambda lists of the functions ECLECTOR.READER:READ-CHAR and
  ECLECTOR.READER:PEEK-CHAR have been fixed.

* The function ECLECTOR.READER::READ-RATIONAL now respects CL:*READ-SUPPRESS*
  and handles inputs of the form 1 2 correctly.

* The reader macro function ECLECTOR.READER::SHARPSIGN-R now handles
  CL:*READ-SUPPRESS* better.

* The default method on the generic function ECLECTOR.READER:INTERPRET-TOKEN
  now distinguishes positive and negative float zeros and uses radix 10 instead
  of the value of CL:*READ-BASE* for float digits.

* The input .|| is now interpreted as a symbol instead of the "consing dot".

* Long lists are now read into concrete syntax tree results without relying on
  unbounded recursion.

* Syntax errors in the initial contents part of #A expressions now signal
  appropriate errors.

* Source ranges of parse results no longer include whitespace which followed
  the corresponding expression in the input.

* The lambda list of the function ECLECTOR.PARSE-RESULT:READ is now accurate.

Release 0.3 (2018-11-28)

* The function ECLECTOR.READER:PEEK-CHAR has been added. The new function is
  like CL:PEEK-CHAR but signals Eclector conditions and uses the Eclector
  readtable.

* The function ECLECTOR.READER:READ-FROM-STRING has been added. The new
  function is like CL:READ-FROM-STRING but uses Eclector's reader
  implementation.

* The reader macro function ECLECTOR.READER::SHARPSIGN-S and the generic
  function ECLECTOR.READER:MAKE-STRUCTURE-INSTANCE have been added. Eclector
  does not define any methods on the latter generic function since there is no
  portable way of creating a structure instance when only the symbol naming the
  structure is known.

* The generic function ECLECTOR.READER:INTERPRET-SYMBOL is now called when the
  reader creates uninterned symbols.

* The generic function ECLECTOR.READER:FIXUP now accepts a client object as the
  the argument.

* In the generic functions ECLECTOR.READER:WRAP-IN-QUASIQUOTE,
  ECLECTOR.READER:WRAP-IN-UNQUOTE and ECLECTOR.READER:WRAP-IN-UNQUOTE-SPLICING,
  the client parameter is now the first parameter.

* The generic function ECLECTOR.READER:WRAP-IN-QUOTE has been added.

Release 0.2 (2018-08-13)

* The concrete-syntax-tree module has been generalized into a parse-result
  module which provides a protocol for constructing arbitrary custom parse
  results. The concrete-syntax-tree module is now based on this new module but
  can be used as before by clients.

* The default value of the eof-error-p parameter of the
  ECLECTOR.READER:READ-CHAR function is now true.

Release 0.1 (2018-08-10)

* Eclector was created by extracting the reader module from the SICL repository.

* The initial release includes many improvements over the original SICL reader,
  particularly in the areas of customizability, error reporting and
  constructing parse results.

